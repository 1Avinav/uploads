-- Inserting sample data into the users table
INSERT INTO test.users (user_id, user_name, email, profile_pic_url, role) VALUES
('45386732', 'John Doe', 'john.doe@example.com', 'https://profilepics.com/john.jpg', 'Admin'),
('12345678', 'Jane Smith', 'jane.smith@example.com', 'https://profilepics.com/jane.jpg', 'Moderator'),
('23456789', 'Michael Brown', 'michael.brown@example.com', 'https://profilepics.com/michael.jpg', 'Checker'),
('34567890', 'Emily Clark', 'emily.clark@example.com', 'https://profilepics.com/emily.jpg', 'Moderator Trainer'),
('45678901', 'David Wilson', 'david.wilson@example.com', 'https://profilepics.com/david.jpg', 'Moderator');


-- Inserting sample data into roles table (if separate)
INSERT INTO test.roles (role_name) VALUES
('Admin'),
('Moderator'),
('Checker'),
('Moderator Trainer');


-- Inserting sample data into the projects table
INSERT INTO test.projects (project_id, api_version, created_date_time, creator, data_sensitivity_level, description, document_source, document_type, project_code, project_name, status) VALUES
('P001', 'v1.0', '2024-11-01 08:00:00', 'John Doe', 'High', 'This is a test project', 'Internal', 'PDF', 'PRJ001', 'Project One', 'Active'),
('P002', 'v2.0', '2024-11-02 09:00:00', 'Jane Smith', 'Medium', 'This project involves sensitive data', 'External', 'Word', 'PRJ002', 'Project Two', 'Inactive'),
('P003', 'v1.2', '2024-11-03 10:00:00', 'Michael Brown', 'Low', 'Research and development project', 'Internal', 'Excel', 'PRJ003', 'Project Three', 'Active');


-- Inserting sample data into project_user_mapping table
INSERT INTO test.project_user_mapping (project_id, user_id, user_role) VALUES
('P001', '45386732', 'Admin'),
('P001', '12345678', 'Moderator'),
('P002', '23456789', 'Checker'),
('P003', '34567890', 'Moderator Trainer'),
('P001', '45678901', 'Moderator');


@RestController
@RequestMapping("/api/roles")
public class RoleController {

    @Autowired
    private RoleService roleService;

    @Autowired
    private UserService userService;

    @Autowired
    private JwtUtil jwtUtil;

    // 1. Get All Roles
    @GetMapping
    public ResponseEntity<List<Role>> getAllRoles(@RequestHeader("Authorization") String authHeader) {
        String sub = jwtUtil.getSubFromJwt(authHeader);
        if (!userService.isAdmin(sub)) {
            return ResponseEntity.status(403).body(null);
        }
        return ResponseEntity.ok(roleService.getAllRoles());
    }

    // 2. Create Role
    @PostMapping
    public ResponseEntity<Role> createRole(@RequestHeader("Authorization") String authHeader, @RequestBody Role role) {
        String sub = jwtUtil.getSubFromJwt(authHeader);
        if (!userService.isAdmin(sub)) {
            return ResponseEntity.status(403).body(null);
        }
        return ResponseEntity.ok(roleService.createRole(role));
    }

    // 3. Assign Role to User
    @PostMapping("/{roleId}/assign")
    public ResponseEntity<Void> assignRoleToUser(@RequestHeader("Authorization") String authHeader, @PathVariable Long roleId, @RequestParam Long userId) {
        String sub = jwtUtil.getSubFromJwt(authHeader);
        if (!userService.isAdmin(sub)) {
            return ResponseEntity.status(403).build();
        }
        roleService.assignRoleToUser(userId, roleId);
        return ResponseEntity.noContent().build();
    }

    // 4. Update Role for User
    @PutMapping("/{roleId}/update")
    public ResponseEntity<Void> updateRoleForUser(@RequestHeader("Authorization") String authHeader, @PathVariable Long roleId, @RequestParam Long userId, @RequestParam String newRole) {
        String sub = jwtUtil.getSubFromJwt(authHeader);
        if (!userService.isAdmin(sub)) {
            return ResponseEntity.status(403).build();
        }
        roleService.updateRoleForUser(userId, roleId, newRole);
        return ResponseEntity.noContent().build();
    }

    // 5. Remove Role from User
    @DeleteMapping("/{roleId}/remove")
    public ResponseEntity<Void> removeRoleFromUser(@RequestHeader("Authorization") String authHeader, @PathVariable Long roleId, @RequestParam Long userId) {
        String sub = jwtUtil.getSubFromJwt(authHeader);
        if (!userService.isAdmin(sub)) {
            return ResponseEntity.status(403).build();
        }
        roleService.removeRoleFromUser(userId, roleId);
        return ResponseEntity.noContent().build();
    }
}

package com.hsbc.managementStudio.service;

import com.hsbc.managementStudio.entity.Role;
import com.hsbc.managementStudio.repository.RoleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RoleService {

    @Autowired
    private RoleRepository roleRepository;

    public List<Role> getAllRoles() {
        return roleRepository.findAll();
    }

    public Role createRole(Role role) {
        return roleRepository.save(role);
    }

    public Role getRoleById(Long id) {
        return roleRepository.findById(id).orElse(null);
    }

    public Role findByRoleName(String roleName) {
        return roleRepository.findByRoleName(roleName);
    }

    public void assignRoleToUser(Long userId, Long roleId) {
        // Logic to assign the role to a user
        // You can implement this part based on your user-role mapping logic.
    }

    public void removeRoleFromUser(Long userId, Long roleId) {
        // Logic to remove the role from a user
        // You can implement this part based on your user-role mapping logic.
    }

    public void updateRoleForUser(Long userId, Long roleId, String newRole) {
        // Logic to update the role for a user
        // You can implement this part based on your user-role mapping logic.
    }
}
