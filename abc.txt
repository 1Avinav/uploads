package com.hsbc.managementstudio.service;

import com.hsbc.managementstudio.model.User;
import com.hsbc.managementstudio.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public User createUser(User user) {
        return userRepository.save(user);
    }

    public Optional<User> getUserById(String userId) {
        return userRepository.findById(userId);
    }

    public Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User updateUser(String userId, User updatedUser) {
        Optional<User> existingUser = userRepository.findById(userId);
        if (existingUser.isPresent()) {
            User user = existingUser.get();
            user.setUserName(updatedUser.getUserName());
            user.setEmail(updatedUser.getEmail());
            user.setProfilePicUrl(updatedUser.getProfilePicUrl());
            user.setRole(updatedUser.getRole());
            return userRepository.save(user);
        }
        throw new IllegalArgumentException("User not found.");
    }

    public void deleteUser(String userId) {
        userRepository.deleteById(userId);
    }
}


package com.hsbc.managementstudio.controller;

import com.hsbc.managementstudio.model.User;
import com.hsbc.managementstudio.service.UserService;
import com.hsbc.managementstudio.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping
    public ResponseEntity<?> createUser(@RequestBody User user, @RequestHeader("Authorization") String authHeader) {
        String role = jwtUtil.getRoleFromJwt(authHeader);
        if (!"Admin".equals(role)) {
            return ResponseEntity.status(403).body("Access Denied: Only Admin can create users.");
        }
        User createdUser = userService.createUser(user);
        return ResponseEntity.ok(createdUser);
    }

    @GetMapping("/{userId}")
    public ResponseEntity<?> getUserById(@PathVariable String userId, @RequestHeader("Authorization") String authHeader) {
        String sub = jwtUtil.getSubFromJwt(authHeader);
        String role = jwtUtil.getRoleFromJwt(authHeader);
        if (!sub.equals(userId) && !"Admin".equals(role)) {
            return ResponseEntity.status(403).body("Access Denied: You can only view your own data.");
        }
        Optional<User> user = userService.getUserById(userId);
        return user.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.status(404).body("User not found."));
    }

    @GetMapping
    public ResponseEntity<?> getAllUsers(@RequestHeader("Authorization") String authHeader) {
        String role = jwtUtil.getRoleFromJwt(authHeader);
        if (!"Admin".equals(role)) {
            return ResponseEntity.status(403).body("Access Denied: Only Admin can view all users.");
        }
        return ResponseEntity.ok(userService.getAllUsers());
    }

    @PutMapping("/{userId}")
    public ResponseEntity<?> updateUser(@PathVariable String userId, @RequestBody User updatedUser,
                                        @RequestHeader("Authorization") String authHeader) {
        String sub = jwtUtil.getSubFromJwt(authHeader);
        String role = jwtUtil.getRoleFromJwt(authHeader);
        if (!sub.equals(userId) && !"Admin".equals(role)) {
            return ResponseEntity.status(403).body("Access Denied: You can only update your own data.");
        }
        return ResponseEntity.ok(userService.updateUser(userId, updatedUser));
    }

    @DeleteMapping("/{userId}")
    public ResponseEntity<?> deleteUser(@PathVariable String userId, @RequestHeader("Authorization") String authHeader) {
        String role = jwtUtil.getRoleFromJwt(authHeader);
        if (!"Admin".equals(role)) {
            return ResponseEntity.status(403).body("Access Denied: Only Admin can delete users.");
        }
        userService.deleteUser(userId);
        return ResponseEntity.noContent().build();
    }
}


package com.hsbc.managementstudio.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import org.springframework.stereotype.Component;

@Component
public class JwtUtil {

    public String getSubFromJwt(String authHeader) {
        String token = authHeader.replace("Bearer ", "");
        Claims claims = Jwts.parser().setSigningKey("your-secret-key").parseClaimsJws(token).getBody();
        return claims.getSubject(); // Extracts 'sub' from JWT
    }

    public String getRoleFromJwt(String authHeader) {
        String sub = getSubFromJwt(authHeader);
        // Assume you fetch the role from the database based on sub
        // Replace with actual DB call
        return "Admin"; // Placeholder for demo purposes
    }
}
