// Example approver list
const approverList = [12345678, 87654321]; // Replace with actual approver PSIDs

// Onboarding form submission handler
document.getElementById('onboardingForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const psid = parseInt(document.getElementById('psid').value);

    if (approverList.includes(psid)) {
        document.getElementById('optionsSection').classList.remove('d-none');
    } else {
        alert('PSID is not authorized.');
    }
});

// Show bulk upload section
function showBulkUpload() {
    hideAllSections();
    document.getElementById('bulkUploadSection').classList.remove('d-none');
}

// Handle bulk upload and create table from CSV file
function bulkUpload() {
    const csvFile = document.getElementById('csvFile').files[0];
    if (csvFile) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const csvContent = e.target.result;
            const csvRows = csvContent.split('\n').filter(row => row.trim() !== '');
            const parsedData = csvRows.slice(1).map(row => {
                const [email, psid, level3, managerpsid] = row.split(',');
                return { email, psid, level3, managerpsid };
            });
            createBulkUploadTable(parsedData);
        };
        reader.readAsText(csvFile);
    } else {
        alert('Please upload a CSV file.');
    }
}

// Create bulk upload table from data
function createBulkUploadTable(data) {
    const bulkUploadTableDiv = document.getElementById('bulkUploadTable');
    bulkUploadTableDiv.innerHTML = ''; 

    if (data.length > 0) {
        const table = document.createElement('table');
        table.className = 'table table-striped table-bordered';
        const thead = document.createElement('thead');
        const tbody = document.createElement('tbody');

        // Create table header
        const headerRow = document.createElement('tr');
        ['Select', 'PSID', 'Email', 'Level 3', 'Manager PSID'].forEach(text => {
            const th = document.createElement('th');
            th.textContent = text;
            headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);

        // Populate table body
        data.forEach(row => {
            const tr = document.createElement('tr');
            const checkboxTd = document.createElement('td');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = row.psid;
            checkboxTd.appendChild(checkbox);
            tr.appendChild(checkboxTd);

            ['psid', 'email', 'level3', 'managerpsid'].forEach(key => {
                const td = document.createElement('td');
                td.textContent = row[key];
                tr.appendChild(td);
            });
            tbody.appendChild(tr);
        });

        table.appendChild(thead);
        table.appendChild(tbody);
        bulkUploadTableDiv.appendChild(table);
        bulkUploadTableDiv.classList.remove('d-none');
        document.getElementById('bulkApproveBtn').classList.remove('d-none');
    }
}

// Approve selected nominations via API call
function approveSelected() {
    const checkboxes = document.querySelectorAll('#bulkUploadTable input[type="checkbox"]:checked');
    const selectedPSIDs = Array.from(checkboxes).map(checkbox => checkbox.value);

    if (selectedPSIDs.length > 0) {
        fetch('/api/nominees/approveselectednomination', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ psids: selectedPSIDs })
        })
        .then(response => response.json())
        .then(data => {
            alert('Selected nominations approved');
            console.log('Approved Nominations:', data);
            hideAllSections();
        })
        .catch(error => console.error('Error approving selected nominations:', error));
    } else {
        alert('No nominations selected for approval');
    }
}

// View all nominations via API call
function viewNominations() {
    fetch('/api/nominees')
        .then(response => response.json())
        .then(data => {
            const viewTable = document.getElementById('viewTable');
            const viewTableBody = viewTable.querySelector('tbody');
            const viewTableHead = viewTable.querySelector('thead');
            viewTableBody.innerHTML = ''; // Clear previous content
            viewTableHead.innerHTML = ''; // Clear previous headers

            if (data.length > 0) {
                const headerRow = document.createElement('tr');
                Object.keys(data[0]).forEach(key => {
                    const th = document.createElement('th');
                    th.textContent = key.charAt(0).toUpperCase() + key.slice(1);
                    headerRow.appendChild(th);
                });
                viewTableHead.appendChild(headerRow);

                data.forEach(nomination => {
                    const tr = document.createElement('tr');
                    Object.values(nomination).forEach(value => {
                        const td = document.createElement('td');
                        td.textContent = value;
                        tr.appendChild(td);
                    });
                    viewTableBody.appendChild(tr);
                });
            }

            document.getElementById('viewSection').classList.remove('d-none');
            hideAllSections('viewSection');
        })
        .catch(error => console.error('Error fetching nominations:', error));
}

// Show revoke section
function showRevoke() {
    hideAllSections();
    document.getElementById('revokeSection').classList.remove('d-none');
}

// Revoke nomination via API call
function revokeNomination() {
    const psid = document.getElementById('revokePSID').value.trim();

    if (psid) {
        fetch(`/api/nominees/revoke/${psid}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            alert(`Nomination for PSID ${psid} revoked.`);
            console.log('Revoked Nomination:', data);
            hideAllSections();
        })
        .catch(error => console.error('Error revoking nomination:', error));
    } else {
        alert('Please enter a valid PSID.');
    }
}

// Hide all sections except the specified one
function hideAllSections(exceptSection) {
    const sections = ['bulkUploadSection', 'viewSection', 'revokeSection'];
    sections.forEach(sectionId => {
        const section = document.getElementById(sectionId);
        if (sectionId !== exceptSection) {
            section.classList.add('d-none');
        }
    });
}
