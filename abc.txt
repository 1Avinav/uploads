CREATE TABLE roles (
    role_id SERIAL PRIMARY KEY,           -- Autogenerated role ID
    role_name VARCHAR(50) NOT NULL UNIQUE -- Role name (e.g., Admin, Moderator, etc.)
);

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,              -- Autogenerated user ID
    user_name VARCHAR(100) NOT NULL,         -- User's name
    email VARCHAR(100) UNIQUE NOT NULL,      -- User's email (unique)
    profile_url VARCHAR(255),                -- URL to the user's profile (optional)
    role_id INT REFERENCES roles(role_id)    -- Foreign key referencing the roles table
);

CREATE TABLE projects (
    project_id SERIAL PRIMARY KEY,                 -- Autogenerated project ID
    api_version VARCHAR(50) NOT NULL,              -- API version
    created_date_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Created timestamp
    creator VARCHAR(100) NOT NULL,                 -- Creator (user or name)
    data_sensitivity_level VARCHAR(50) NOT NULL,    -- Data sensitivity level
    description TEXT,                              -- Description of the project
    document_source VARCHAR(100),                  -- Source of the document
    document_type VARCHAR(100),                    -- Type of document (PDF, Word, etc.)
    project_code VARCHAR(50) NOT NULL,             -- Unique project code
    project_name VARCHAR(255) NOT NULL,            -- Project name
    status VARCHAR(50) NOT NULL                    -- Project status (e.g., Active, Inactive, etc.)
);


CREATE TABLE project_user_mapping (
    mapping_id SERIAL PRIMARY KEY,                  -- Auto-incremented mapping ID
    project_id INT REFERENCES projects(project_id) ON DELETE CASCADE,  -- Foreign key to projects
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,           -- Foreign key to users
    role_name VARCHAR(50) NOT NULL,                  -- Role of the user in the project
    UNIQUE(project_id, user_id)                     -- Ensures one user can only be linked to a project once
);

INSERT INTO roles (role_name) VALUES
('Admin'),
('Moderator'),
('Trainer'),
('Checker');

INSERT INTO users (user_name, email, profile_url, role_id) VALUES
('John Doe', 'john.doe@example.com', 'http://example.com/johndoe', 1),  -- Admin
('Jane Smith', 'jane.smith@example.com', 'http://example.com/janesmith', 2),  -- Moderator
('Michael Lee', 'michael.lee@example.com', 'http://example.com/michaellee', 3),  -- Trainer
('Emily Clark', 'emily.clark@example.com', 'http://example.com/emilyclark', 4);  -- Checker

INSERT INTO projects (api_version, created_date_time, creator, data_sensitivity_level, 
    description, document_source, document_type, project_code, project_name, status) VALUES
('v1.0', '2024-11-20 10:00:00', 'John Doe', 'High', 
 'A new AI-based project for analyzing railway traffic.', 
 'Internal', 'PDF', 'AI-PROJ-001', 'AI Traffic Monitoring System', 'Active'),

('v1.0', '2024-11-15 09:30:00', 'Jane Smith', 'Medium', 
 'Project focused on enhancing the user experience for train bookings.', 
 'External', 'Word Document', 'UX-PROJ-001', 'Train Booking Experience', 'Inactive'),

('v2.0', '2024-11-18 11:00:00', 'Michael Lee', 'Low', 
 'A minor update to the system for ticket validation and monitoring.', 
 'Internal', 'PDF', 'SYS-PROJ-002', 'Ticket Validation Update', 'Active');

INSERT INTO project_user_mapping (project_id, user_id, role_name) VALUES
(1, 1, 'Admin'),  -- John Doe (Admin) in AI Traffic Monitoring System
(1, 2, 'Moderator'),  -- Jane Smith (Moderator) in AI Traffic Monitoring System
(2, 3, 'Trainer'),  -- Michael Lee (Trainer) in Train Booking Experience
(3, 4, 'Checker');  -- Emily Clark (Checker) in Ticket Validation Update

CREATE TABLE project_user_mapping (
    mapping_id BIGSERIAL PRIMARY KEY,
    project_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    role_name VARCHAR(255) NOT NULL,
    FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES "user"(user_id) ON DELETE CASCADE
);

try {
            // Calling the service layer to create a mapping between project and user
            ProjectUserMapping mapping = projectUserMappingService.createMapping(projectId, userId, roleName);
            return ResponseEntity.ok("User successfully added to project with mapping ID: " + mapping.getMappingId());
        } catch (Exception e) {
            // Handling any errors and returning a meaningful message
            return ResponseEntity.status(400).body("Error: " + e.getMessage());
        }
public ProjectUserMapping createMapping(Long projectId, Long userId, String roleName) {
    Project project = projectRepository.findById(projectId).orElseThrow(() -> new RuntimeException("Project not found"));
    User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
    
    // Create a new ProjectUserMapping
    ProjectUserMapping mapping = new ProjectUserMapping(project, user, roleName);
    return mappingRepository.save(mapping);
}
ALTER TABLE users ALTER COLUMN role_id DROP NOT NULL;

