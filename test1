import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class UserControllerTest {

    @Autowired
    private TestRestTemplate restTemplate;

    private final String baseUrl = "/api/users";
    private String token;  // JWT token for authorization

    private User testUser;

    @BeforeEach
    public void setUp() {
        testUser = new User();
        testUser.setUsername("johndoe");
        testUser.setEmail("john.doe@example.com");

        // Assuming you have a method to generate or mock the token
        token = "mock-jwt-token"; // This should be replaced with a valid token mock

        // Create user to test on
        ResponseEntity<User> createResponse = restTemplate.postForEntity(baseUrl, testUser, User.class);
        assertEquals(HttpStatus.CREATED, createResponse.getStatusCode());
    }

    private HttpHeaders createHeadersWithAuthorization() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + token);
        return headers;
    }

    // Test: Create User
    @Test
    public void testCreateUser() {
        HttpHeaders headers = createHeadersWithAuthorization();
        HttpEntity<User> requestEntity = new HttpEntity<>(testUser, headers);

        ResponseEntity<User> response = restTemplate.exchange(baseUrl, HttpMethod.POST, requestEntity, User.class);

        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody().getId());
        assertEquals("johndoe", response.getBody().getUsername());
    }

    // Test: Get User by ID
    @Test
    public void testGetUser() {
        Long userId = testUser.getId();
        HttpHeaders headers = createHeadersWithAuthorization();
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        ResponseEntity<User> response = restTemplate.exchange(baseUrl + "/" + userId, HttpMethod.GET, entity, User.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("johndoe", response.getBody().getUsername());
    }

    // Test: Update User
    @Test
    public void testUpdateUser() {
        Long userId = testUser.getId();
        testUser.setEmail("john.newemail@example.com");

        HttpHeaders headers = createHeadersWithAuthorization();
        HttpEntity<User> entity = new HttpEntity<>(testUser, headers);

        restTemplate.exchange(baseUrl + "/" + userId, HttpMethod.PUT, entity, Void.class);

        // Verify that the update happened
        ResponseEntity<User> updatedUserResponse = restTemplate.exchange(baseUrl + "/" + userId, HttpMethod.GET, entity, User.class);
        assertEquals("john.newemail@example.com", updatedUserResponse.getBody().getEmail());
    }

    // Test: Delete User
    @Test
    public void testDeleteUser() {
        Long userId = testUser.getId();

        HttpHeaders headers = createHeadersWithAuthorization();
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        restTemplate.exchange(baseUrl + "/" + userId, HttpMethod.DELETE, entity, Void.class);

        // Try to fetch the deleted user
        try {
            restTemplate.exchange(baseUrl + "/" + userId, HttpMethod.GET, entity, User.class);
            fail("Expected HttpClientErrorException");
        } catch (HttpClientErrorException.NotFound e) {
            assertEquals(404, e.getRawStatusCode());
        }
    }
}
