=package com.example.controller;

import com.example.model.Project;
import com.example.repository.ProjectRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest
public class ProjectControllerTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private ProjectRepository projectRepository;

    @MockBean
    private JwtUtil jwtUtil;

    @MockBean
    private UserService userService;

    @BeforeEach
    void setup() {
        // Mock JWT Util and User Service
        when(jwtUtil.extractSub("mock-jwt-token")).thenReturn("testUser");
        when(userService.isAdmin("testUser")).thenReturn(true);
    }

    @Test
    public void testCreateProject() {
        Project project = new Project(1L, "Test Project", "Test Description", "v1", 
                                      "John Doe", "High", "Internal", 
                                      "PDF", "PRJ001", "Active", LocalDateTime.now());

        // Send POST request to create a new project
        ResponseEntity<Project> response = restTemplate.exchange(
                "/api/projects", HttpMethod.POST, 
                new HttpEntity<>(project, createHeaders("Bearer mock-jwt-token")), Project.class);

        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals("Test Project", response.getBody().getProjectName());
    }

    @Test
    public void testGetProject() {
        Project project = new Project(1L, "Test Project", "Test Description", "v1", 
                                      "John Doe", "High", "Internal", 
                                      "PDF", "PRJ001", "Active", LocalDateTime.now());
        projectRepository.save(project);

        // Send GET request to retrieve the project
        ResponseEntity<Project> response = restTemplate.exchange(
                "/api/projects/" + project.getProjectId(), HttpMethod.GET, 
                new HttpEntity<>(createHeaders("Bearer mock-jwt-token")), Project.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(project.getProjectName(), response.getBody().getProjectName());
    }

    @Test
    public void testUpdateProject() {
        Project project = new Project(1L, "Test Project", "Test Description", "v1", 
                                      "John Doe", "High", "Internal", 
                                      "PDF", "PRJ001", "Active", LocalDateTime.now());
        projectRepository.save(project);

        // Update project details
        project.setProjectName("Updated Project");

        // Send PUT request to update the project
        ResponseEntity<Project> response = restTemplate.exchange(
                "/api/projects/" + project.getProjectId(), HttpMethod.PUT, 
                new HttpEntity<>(project, createHeaders("Bearer mock-jwt-token")), Project.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Updated Project", response.getBody().getProjectName());
    }

    @Test
    public void testDeleteProject() {
        Project project = new Project(1L, "Test Project", "Test Description", "v1", 
                                      "John Doe", "High", "Internal", 
                                      "PDF", "PRJ001", "Active", LocalDateTime.now());
        projectRepository.save(project);

        // Send DELETE request to delete the project
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/projects/" + project.getProjectId(), HttpMethod.DELETE, 
                new HttpEntity<>(createHeaders("Bearer mock-jwt-token")), Void.class);

        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        assertEquals(false, projectRepository.existsById(project.getProjectId()));
    }

    private HttpHeaders createHeaders(String token) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", token);
        return headers;
    }
}


-- schema.sql for H2 Database
CREATE SCHEMA IF NOT EXISTS omnidoc_management_studio;

CREATE TABLE omnidoc_management_studio.project (
    project_id BIGINT PRIMARY KEY,
    project_name VARCHAR(255),
    description VARCHAR(255),
    api_version VARCHAR(50),
    creator VARCHAR(100),
    data_sensitivity_level VARCHAR(50),
    document_source VARCHAR(100),
    document_type VARCHAR(50),
    project_code VARCHAR(50),
    status VARCHAR(50),
    created_date_time TIMESTAMP
);

