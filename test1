package com.hsbc.managementStudio.project.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hsbc.managementStudio.project.model.Project;
import com.hsbc.managementStudio.project.repository.ProjectRepository;
import com.hsbc.managementStudio.project.util.JwtUtil;
import com.hsbc.managementStudio.project.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
class ProjectControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ProjectRepository projectRepository;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private JwtUtil jwtUtil;

    @MockBean
    private UserService userService;

    private String adminToken = "valid-admin-token";
    private String userToken = "valid-user-token";

    @BeforeEach
    void setup() {
        projectRepository.deleteAll();

        // Mock behavior of JwtUtil
        when(jwtUtil.extractSub(adminToken)).thenReturn("admin-sub");
        when(jwtUtil.extractSub(userToken)).thenReturn("user-sub");

        // Mock behavior of UserService
        when(userService.isAdmin("admin-sub")).thenReturn(true);
        when(userService.isAdmin("user-sub")).thenReturn(false);
    }

    @Test
    void testCreateProject_AsAdmin() throws Exception {
        Project project = new Project();
        project.setProjectId(1L);
        project.setProjectName("Test Project");
        project.setDescription("This is a test project");
        project.setStatus("Active");
        project.setCreatedDateTime(LocalDateTime.now());

        String projectJson = objectMapper.writeValueAsString(project);

        // Admin user: Successful creation
        mockMvc.perform(post("/api/projects")
                        .header("Authorization", "Bearer " + adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(projectJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.projectName").value("Test Project"));
    }

    @Test
    void testCreateProject_AsNonAdmin() throws Exception {
        Project project = new Project();
        project.setProjectId(1L);
        project.setProjectName("Test Project");
        project.setDescription("This is a test project");
        project.setStatus("Active");
        project.setCreatedDateTime(LocalDateTime.now());

        String projectJson = objectMapper.writeValueAsString(project);

        // Non-admin user: Forbidden
        mockMvc.perform(post("/api/projects")
                        .header("Authorization", "Bearer " + userToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(projectJson))
                .andExpect(status().isForbidden())
                .andExpect(content().string("Access Denied: Admins Only"));
    }

    @Test
    void testDeleteProject_AsAdmin() throws Exception {
        Project project = new Project(1L, "Test Project", "Active", LocalDateTime.now());
        projectRepository.save(project);

        // Admin user: Successful deletion
        mockMvc.perform(delete("/api/projects/1")
                        .header("Authorization", "Bearer " + adminToken))
                .andExpect(status().isOk())
                .andExpect(content().string("Project Deleted Successfully"));
    }

    @Test
    void testDeleteProject_AsNonAdmin() throws Exception {
        Project project = new Project(1L, "Test Project", "Active", LocalDateTime.now());
        projectRepository.save(project);

        // Non-admin user: Forbidden
        mockMvc.perform(delete("/api/projects/1")
                        .header("Authorization", "Bearer " + userToken))
                .andExpect(status().isForbidden())
                .andExpect(content().string("Access Denied: Admins Only"));
    }

    @Test
    void testGetProjectDetails() throws Exception {
        Project project = new Project(1L, "Test Project", "Active", LocalDateTime.now());
        projectRepository.save(project);

        // Any user can fetch details
        mockMvc.perform(get("/api/projects/1")
                        .header("Authorization", "Bearer " + userToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.projectName").value("Test Project"));
    }
}
