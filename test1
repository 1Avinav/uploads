import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.client.TestRestTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class ProjectControllerTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @MockBean
    private JwtUtil jwtUtil;

    @MockBean
    private UserService userService;

    private String token = "Bearer mock-token";

    @BeforeEach
    public void setup() {
        // Mock the JWT utility methods
        when(jwtUtil.extractUsername("mock-token")).thenReturn("admin");
        when(userService.isAdmin("admin")).thenReturn(true);
    }

    @Test
    public void testCreateProject() {
        Project project = new Project();
        project.setProjectName("Test Project");
        project.setProjectCode("PRJ001");
        project.setCreator("John Doe");
        project.setDescription("Test project description");
        project.setApiVersion("v1");
        project.setDataSensitivityLevel("High");
        project.setDocumentSource("Internal");
        project.setDocumentType("PDF");
        project.setStatus("Active");

        ResponseEntity<Project> response = restTemplate.postForEntity("/api/projects", project, Project.class);

        assertEquals(HttpStatus.CREATED, response.getStatusCode());
    }

    @Test
    public void testGetProject() {
        Long projectId = 1L;
        Project project = new Project();
        project.setProjectId(projectId);
        project.setProjectName("Test Project");

        when(jwtUtil.extractUsername("mock-token")).thenReturn("admin");
        when(userService.isAdmin("admin")).thenReturn(true);

        restTemplate.postForEntity("/api/projects", project, Project.class);

        ResponseEntity<Project> response = restTemplate.getForEntity("/api/projects/1", Project.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Test Project", response.getBody().getProjectName());
    }

    @Test
    public void testDeleteProject() {
        Long projectId = 1L;

        when(jwtUtil.extractUsername("mock-token")).thenReturn("admin");
        when(userService.isAdmin("admin")).thenReturn(true);

        restTemplate.delete("/api/projects/{id}", projectId);

        ResponseEntity<Project> response = restTemplate.getForEntity("/api/projects/1", Project.class);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }
}
